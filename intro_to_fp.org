
#+TITLE: Introduction to Functional Programming

#+AUTHOR: Jean-Louis Giordano (@jellismymind)

#+DATE: <2016-11-22 Tue>

#+ATTR_LATEX: :height 2cm :align center
[[./images/cljs_logo.png]] [[./images/elm_logo.png]] [[./images/js_logo.png]]

* What is FP?

* What is a value?

A value is the final result of a computation.

The value of 1 + 1 is 2.

* What is an expression?

A symbol or combination of symbols that represents a value or a
relationship between values

1 + 1 is an expression, it reduces to the value 2.

2 is also an expression as well as a value.

* What is evaluation?

Evaluation is the reduction of an expression to its value.

Evaluate: e- (ex-, out) + value
"To extract the value"

Example of evaluation:
#+BEGIN_SRC javascript
1 + 1 + 1
1 + 2
3
#+END_SRC
#+BEGIN_SRC
+------------+
| Expression |
+------------+
      |
      V
+------------+
| Evaluation |
+------------+
      |
      V
+------------+
|   Value    |
+------------+
#+END_SRC

* What is a variable?

A variable is a reference to a value.

In:
#+BEGIN_SRC javascript
var a = 2;
#+END_SRC
a is a variable, referencing the value 2

* What are side-effects?

A side effect is a step in the evaluation of an expression that has
effects outside of the expression itself.

Examples:
#+BEGIN_SRC javascript
console.log("hello");

a = 1; a += 1;
#+END_SRC

#+BEGIN_SRC
+------------+
| Expression |
+------------+
      |
      V
+------------+
| Evaluation |~~~> Side Effect
+------------+
      |
      V
+------------+
|   Value    |
+------------+
#+END_SRC

* Statement

A statement is an expression that evaluates to nothing.

** In JavaScript:

Expression:
#+BEGIN_SRC javascript
1 + 1;
(x) => x ** 2;
#+END_SRC

Statement:
#+BEGIN_SRC javascript
var a = 1;
#+END_SRC

** In Clojure and Haskell

Only expressions
#+BEGIN_SRC clojure
(def a
  (if true "hello" "goodbye"))
#+END_SRC
#+BEGIN_SRC elm
a = if True
    then "hello"
    else "goodbye"
#+END_SRC

** Why is that?

Statements require side effects,
intrinsically imperative.

#+BEGIN_SRC
+------------+
| Statement  |
+------------+
      |
      V
+------------+
| Evaluation |~~~> Side Effect
+------------+
      |
      X
#+END_SRC

* What is a function?

A function is an abstraction for an expression, where one or several
values in the expression are replaced by variables.

Let's abstract the following expression:
#+BEGIN_SRC python
1 + 1

inc = function (x) { return x + 1; };
inc = (x) => {return x + 1;};
inc = (x) => x + 1;
#+END_SRC
#+BEGIN_SRC clojure
(+ 1 1)
(def inc (fn [x] (+ x 1)))
(defn inc [x] (+ x 1))
#+END_SRC
#+BEGIN_SRC elm
1 + 1
inc = \x -> x + 1
inc x = 1 + x
#+END_SRC

Question: Is a function a value?

* What is the arity of a function?

The number of arguments a function takes is its arity.
#+BEGIN_SRC javascript
// arity 0
zero = () => 0;

// arity 1
inc = (x) => x + 1;

// arity 2
add = (x, y) => x + y;

// infinite arity
countArgs = (...args) => args.length;
#+END_SRC

* Routine vs Function

A routine is an abstraction that do not return a value.
#+BEGIN_SRC python
a = (x) => {
  console.log(x);
}

b = (x) => {
  return x;
};
#+END_SRC
a is a routine, b is a function.

A procedure can either be a routine or a function.

* What is a pure function?

A pure function is a side-effect free function that always maps a
given input to the same output.

Which of the following is a pure function?
#+BEGIN_SRC python
a = (x) => x + 1;

b = (x) => {
  console.log(x);
  return x;
};

c = (x) => x * Math.random();

d = (x) => x.push("hello");

e = (x) => {
  var result = [];
  while (x > 0) {
    result.unshift(x);
    x--;
  }
  return result;
};
#+END_SRC

* Immutable vs Mutable

Immutable means that cannot change.
Think "read only", "constants".

Persistent Datastructures are immutable,
and can't be updated in-place.

* Referencial Transparency

An expression that is deterministic and without side-effects is
referencially transparent.

It means it can be replaced by its value without changing the
behaviour of the program.

* What is Application?

Calling a function with some arguments is applying that function to
the value of those arguments.

Abstraction and Application are the core concepts of functional
programming.
#+BEGIN_SRC javascript
f(arg1, arg2);
1 + 2;
#+END_SRC
#+BEGIN_SRC clojure
(f arg1 arg2)
(+ 1 2)
#+END_SRC
#+BEGIN_SRC elm
f arg1 arg2
1 + 2
(+) 1 2
#+END_SRC

* Higher order function

Functions can return functions, and take functions as argument.

#+BEGIN_SRC python
def apply (f, x, y):
  return f(x, y)

apply(add, 1, 2)

def incrementer (n):
  return lambda m: m + n

add2 = incrementer(2)
add2(4)
#+END_SRC

* Partial Application

Take a function of arity n, and m < n arguments,
and return a function of arity n - m.

Example:
#+BEGIN_SRC clojure
(+ 1 2 3)
((partial +) 1 2 3)
((partial + 1) 2 3)
((partial + 1 2) 3)
((partial + 1 2 3))
#+END_SRC
#+BEGIN_SRC elm
1 + 1
(+) 1 1
((+) 1) 1
-- Currying
#+END_SRC

* Partial Application (bis)
#+BEGIN_SRC clojure
(defn part [f & args]
  (fn [& rest]
    (apply f (concat args rest))))

((part + 1 2) 3 4)
#+END_SRC

* How to do things?

** map
#+BEGIN_SRC clojure
(map inc [1 2 3])
#+END_SRC
** filter
#+BEGIN_SRC clojure
(filter even? [1 2 3 4])
#+END_SRC
** reduce / fold
#+BEGIN_SRC clojure
(reduce + [1 2 3])
#+END_SRC
** list comprehension / generators
#+BEGIN_SRC clojure
(for [x (range 1 10) :when (even? x)
      y (range 1 10) :when (odd? y)]
  (* x y))
#+END_SRC
** recursion
#+BEGIN_SRC clojure
(defn factorial [n]
  (if (zero? n)
    1
    (* n factorial)))
#+END_SRC
** pattern matching
#+BEGIN_SRC elm
-- Lists in Elm
[1,2,3] == (1 :: 2 :: 3 :: [])
[1,2,3] == 1 :: [2,3]

eval things = case things of
               [] -> ""
               ["surprise", x] -> String.concat [x, "!!!"]
               "concat" :: rest -> String.concat rest
               _ -> "no match"
#+END_SRC
** function composition
#+BEGIN_SRC clojure
(def inc (partial + 1))
(def twice (partial * 2))
(def inc-and-double (comp twice inc))
(def double-and-inc (comp inc twice))
#+END_SRC
#+BEGIN_SRC elm
inc = (+) 1
twice = (*) 2
incAndDouble = inc >> twice
doubleAndInc = inc << twice
#+END_SRC

* What are Types?

Types are sets of values.

1 belongs to several types: it's an Integer, a Number, a Value,
the value 1.

One of the elements of the set of all Values.

One of the elements of the set of all Integers.

The only element in the set of all values that are 1.

1 has the type Value, Integer, Being 1

* What is polymorphism?

** ad hoc polymorphism
#+BEGIN_SRC clojure
(defrecord Cow [spotted?])
(defrecord Duck [daffy?])
(defmulti talk type)
(defmethod talk Cow [_] "Muuu")
(defmethod talk Duck [_] "Quack Quack")

(talk (map->Cow {:spotted? true}))
(talk (map->Duck {:daffy? true}))
#+END_SRC
** subtyping
#+BEGIN_SRC clojure
(defrecord Cow [spotted?])
(defrecord Ostrich [height])
(defrecord Duck [daffy?])
(defrecord Goose [silly?])
(defrecord Dog [grumpy?])

(def h
  (-> (make-hierarchy)
      (derive ::bird ::animal)
      (derive Dog ::animal)
      (derive Cow ::animal)
      (derive Duck ::bird)
      (derive Goose ::bird)
      (derive Ostrich ::bird)))

(defn dispatch [v] (type v))

(defmulti flies? #'dispatch :hierarchy #'h)

(defmethod flies? ::animal  [_] false)
(defmethod flies? ::bird    [_] true)
(defmethod flies? Ostrich [_] false)
(defmethod flies? Duck [duck] (not (:daffy? duck)))

(flies? (map->Cow {:spotted? true}))
(flies? (map->Goose {:silly? true}))
(flies? (map->Ostrich {:height 100}))
(flies? (map->Duck {:daffy? true}))
(flies? (map->Duck {:daffy? false}))
#+END_SRC

** parametric polymorphism
#+BEGIN_SRC haskell
data KindOfDuck = Duck | DaffyDuck

instance Show KindOfDuck where
  show Duck = "Duck"
  show DaffyDuck = "DaffyDuck"

data KindOfHorse = Horse deriving (Show)

class Walker a where
  walk :: a -> String

instance Walker KindOfDuck where
  walk Duck = "wobble"
  walk DaffyDuck = "run"

instance Walker KindOfHorse where
  walk horse = "gallop"

walkTheSame :: Walker a, Walker b => a -> b -> Bool
walkTheSame a b = (walk a) == (walk b)

bunchWalk :: Walker a => [a] -> [String]
bunchWalk = map walk
#+END_SRC
